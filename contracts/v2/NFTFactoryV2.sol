// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol";

/**
 * @dev {ERC721} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - a pauser role that allows to stop all token transfers
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 */
contract NFTFactoryV2 is Initializable, ContextUpgradeable, AccessControlEnumerableUpgradeable, ERC721EnumerableUpgradeable, ERC721BurnableUpgradeable, ERC721PausableUpgradeable {
    function initialize(
        string memory name, 
        string memory symbol, 
        string memory baseTokenURI,
        uint256 price
        ) public virtual initializer {
        __ERC721PresetMinterPauserAutoId_init(name, symbol, baseTokenURI);
        nftPrice = price;
    }
    using CountersUpgradeable for CountersUpgradeable.Counter;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");

    CountersUpgradeable.Counter private _tokenIdTracker;

    string private _baseTokenURI;

    uint256 public nftPrice;

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    function __ERC721PresetMinterPauserAutoId_init(
        string memory name, 
        string memory symbol, 
        string memory baseTokenURI
        ) internal initializer {
        __Context_init_unchained();
        __ERC165_init_unchained();
        __AccessControl_init_unchained();
        __AccessControlEnumerable_init_unchained();
        __ERC721_init_unchained(name, symbol);
        __ERC721Enumerable_init_unchained();
        __ERC721Burnable_init_unchained();
        __Pausable_init_unchained();
        __ERC721Pausable_init_unchained();
        __ERC721PresetMinterPauserAutoId_init_unchained(name, symbol, baseTokenURI);
    }

    function __ERC721PresetMinterPauserAutoId_init_unchained(string memory name, string memory symbol, string memory baseTokenURI) internal initializer {
        _baseTokenURI = baseTokenURI;

        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());

        _setupRole(MINTER_ROLE, _msgSender());
        _setupRole(PAUSER_ROLE, _msgSender());
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address to) public virtual {
        require(hasRole(MINTER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have minter role to mint");

        // We cannot just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        _mint(to, _tokenIdTracker.current());
        _tokenIdTracker.increment();
    }

    /**
     * @dev Pauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function pause() public virtual {
        require(hasRole(PAUSER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have pauser role to pause");
        _pause();
    }

    /**
     * @dev Unpauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function unpause() public virtual {
        require(hasRole(PAUSER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have pauser role to unpause");
        _unpause();
    }

    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable, ERC721PausableUpgradeable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControlEnumerableUpgradeable, ERC721Upgradeable, ERC721EnumerableUpgradeable) returns (bool) {
        return super.supportsInterface(interfaceId);
    }
    uint256[48] private __gap;
}





//
//pragma solidity ^0.8.4;
//
//import "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol";
//import "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol";
//import "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol";
//import "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol";
//import "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol";
//import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
//import "../TemplateNFT.sol";
//import "./TemplateNFTV2.sol";
//
///**
// * @dev {ERC1155} token, including:
// *
// *  - ability for holders to burn (destroy) their tokens
// *  - a minter role that allows for token minting (creation)
// *  - a pauser role that allows to stop all token transfers
// *
// * This contract uses {AccessControl} to lock permissioned functions using the
// * different roles - head to its documentation for details.
// *
// * The account that deploys the contract will be granted the minter and pauser
// * roles, as well as the default admin role, which will let it grant both minter
// * and pauser roles to other accounts.
// */
//contract NFTFactoryV2 is Initializable, ContextUpgradeable, AccessControlEnumerableUpgradeable, ERC1155BurnableUpgradeable, ERC1155PausableUpgradeable {
//    function initialize(string memory uri) public virtual initializer {
//        __ERC1155PresetMinterPauser_init(uri);
//    }
//    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
//    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
//
//    /**
//     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE`, and `PAUSER_ROLE` to the account that
//     * deploys the contract.
//     */
//    function __ERC1155PresetMinterPauser_init(string memory uri) internal initializer {
//        __Context_init_unchained();
//        __ERC165_init_unchained();
//        __AccessControl_init_unchained();
//        __AccessControlEnumerable_init_unchained();
//        __ERC1155_init_unchained(uri);
//        __ERC1155Burnable_init_unchained();
//        __Pausable_init_unchained();
//        __ERC1155Pausable_init_unchained();
//        __ERC1155PresetMinterPauser_init_unchained(uri);
//    }
//
//    function __ERC1155PresetMinterPauser_init_unchained(string memory uri) internal initializer {
//        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
//
//        _setupRole(MINTER_ROLE, _msgSender());
//    }
//
//    /**
//     * @dev Creates `amount` new tokens for `to`, of token type `id`.
//     *
//     * See {ERC1155-_mint}.
//     *
//     * Requirements:
//     *
//     * - the caller must have the `MINTER_ROLE`.
//     */
//    function mint(address to, uint256 id, uint256 amount, bytes memory data) public virtual {
//        require(hasRole(MINTER_ROLE, _msgSender()), "NFTFactory: must have minter role to mint");
//
//        _mint(to, id, amount, data);
//    }
//
//    /**
//     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] variant of {mint}.
//     */
//    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) public virtual {
//        require(hasRole(MINTER_ROLE, _msgSender()), "NFTFactory: must have minter role to mint");
//
//        _mintBatch(to, ids, amounts, data);
//    }
//
//    /**
//     * @dev Pauses all token transfers.
//     *
//     * See {ERC1155Pausable} and {Pausable-_pause}.
//     *
//     * Requirements:
//     *
//     * - the caller must have the `PAUSER_ROLE`.
//     */
//    function pause() public virtual {
//        require(hasRole(PAUSER_ROLE, _msgSender()), "NFTFactory: must have pauser role to pause");
//        _pause();
//    }
//
//    /**
//     * @dev Unpauses all token transfers.
//     *
//     * See {ERC1155Pausable} and {Pausable-_unpause}.
//     *
//     * Requirements:
//     *
//     * - the caller must have the `PAUSER_ROLE`.
//     */
//    function unpause() public virtual {
//        require(hasRole(PAUSER_ROLE, _msgSender()), "NFTFactory: must have pauser role to unpause");
//        _unpause();
//    }
//
//    /**
//     * @dev See {IERC165-supportsInterface}.
//     */
//    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControlEnumerableUpgradeable, ERC1155Upgradeable) returns (bool) {
//        return super.supportsInterface(interfaceId);
//    }
//
//    function _beforeTokenTransfer(
//        address operator,
//        address from,
//        address to,
//        uint256[] memory ids,
//        uint256[] memory amounts,
//        bytes memory data
//    )
//        internal virtual override(ERC1155Upgradeable, ERC1155PausableUpgradeable)
//    {
//        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);
//    }
//    uint256[50] private __gap;
//}